{
  "address": "0x46c687bFD144c80C0B1BD2c60D3d970fB644b0E6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masterDeployer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidTokenOrder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorisedDeployer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "bytecodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "calculatePoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "configAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_deployData",
          "type": "bytes"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeployData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "contract IMasterDeployer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "pairPools",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "poolsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb52a4ba42fc33f2883fba765aadd4e5cace2e2bc16f73e3f1f342cafe12f7b99",
  "receipt": {
    "to": null,
    "from": "0x58B4B6951e9174F153635574076241315D7d3503",
    "contractAddress": "0x46c687bFD144c80C0B1BD2c60D3d970fB644b0E6",
    "transactionIndex": 9,
    "gasUsed": "4243386",
    "logsBloom": "0x
    "blockHash": "0x38a7bd24c12b6b8eee63d03913b6c829090713afa210a4ddd6b824538d9a87a8",
    "transactionHash": "0xb52a4ba42fc33f2883fba765aadd4e5cace2e2bc16f73e3f1f342cafe12f7b99",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 26199602,
        "transactionHash": "0xb52a4ba42fc33f2883fba765aadd4e5cace2e2bc16f73e3f1f342cafe12f7b99",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000058b4b6951e9174f153635574076241315d7d3503",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000337ccb3fb94a86000000000000000000000000000000000000000000000000477805cdb002dbb3000000000000000000000000000000000000000000000cb2e052f229d83b5e26000000000000000000000000000000000000000000000000474489027049912d000000000000000000000000000000000000000000000cb2e0866ef517f4a8ac",
        "logIndex": 132,
        "blockHash": "0x38a7bd24c12b6b8eee63d03913b6c829090713afa210a4ddd6b824538d9a87a8"
      }
    ],
    "blockNumber": 26199602,
    "cumulativeGasUsed": "6288289",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1E2d3ba40F973135f397fF7f2Ec0d1cC835E8b73"
  ],
  "numDeployments": 1,
  "solcInputHash": "aab1aee3737f2d248dedac5eaa6ba00f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterDeployer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidTokenOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorisedDeployer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"bytecodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"calculatePoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"configAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_deployData\",\"type\":\"bytes\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"contract IMasterDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pairPools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"poolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"UnauthorisedDeployer()\":[{\"details\":\"Custom Errors\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contract for deploying Trident Solidly Pool with configurations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/solidly/SolidlyPoolFactory.sol\":\"SolidlyPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x698cdbf614109fafc2bf00057b60715fa3aba9dad447c42f4f8b749ae16ce84f\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private reentrancyStatus = 1;\\n\\n    modifier nonReentrant() {\\n        require(reentrancyStatus == 1, \\\"REENTRANCY\\\");\\n\\n        reentrancyStatus = 2;\\n\\n        _;\\n\\n        reentrancyStatus = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x37da48458a348878d8db5b58367d734e340b9172ef947df430027638fc45a015\",\"license\":\"AGPL-3.0-only\"},\"contracts/abstract/PoolDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later-only\\n\\npragma solidity >=0.8.0;\\n\\n/// @dev Custom Errors\\nerror UnauthorisedDeployer();\\nerror ZeroAddress();\\nerror InvalidTokenOrder();\\n\\n/// @notice Trident pool deployer for whitelisted template factories.\\n/// @author Mudit Gupta.\\nabstract contract PoolDeployer {\\n    address public immutable masterDeployer;\\n\\n    mapping(address => mapping(address => address[])) public pools;\\n    mapping(bytes32 => address) public configAddress;\\n\\n    modifier onlyMaster() {\\n        if (msg.sender != masterDeployer) revert UnauthorisedDeployer();\\n        _;\\n    }\\n\\n    constructor(address _masterDeployer) {\\n        if (_masterDeployer == address(0)) revert ZeroAddress();\\n        masterDeployer = _masterDeployer;\\n    }\\n\\n    function _registerPool(\\n        address pool,\\n        address[] memory tokens,\\n        bytes32 salt\\n    ) internal onlyMaster {\\n        // Store the address of the deployed contract.\\n        configAddress[salt] = pool;\\n        // Attacker used underflow, it was not very effective. poolimon!\\n        // null token array would cause deployment to fail via out of bounds memory axis/gas limit.\\n        unchecked {\\n            for (uint256 i; i < tokens.length - 1; ++i) {\\n                if (tokens[i] >= tokens[i + 1]) revert InvalidTokenOrder();\\n                for (uint256 j = i + 1; j < tokens.length; ++j) {\\n                    pools[tokens[i]][tokens[j]].push(pool);\\n                    pools[tokens[j]][tokens[i]].push(pool);\\n                }\\n            }\\n        }\\n    }\\n\\n    function poolsCount(address token0, address token1) external view returns (uint256 count) {\\n        count = pools[token0][token1].length;\\n    }\\n\\n    function getPools(\\n        address token0,\\n        address token1,\\n        uint256 startIndex,\\n        uint256 count\\n    ) external view returns (address[] memory pairPools) {\\n        pairPools = new address[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            pairPools[i] = pools[token0][token1][startIndex + i];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8e62e4204fe089b02a80330804cdc69aa3d6ae91d2ea7d371683ebf4aeacb817\",\"license\":\"GPL-3.0-or-later-only\"},\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../libraries/RebaseLibrary.sol\\\";\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    /// @dev Reads the Rebase `totals`from storage for a given token\\n    function totals(address token) external view returns (Rebase memory total);\\n\\n    /// @dev Approves users' BentoBox assets to a \\\"master\\\" contract.\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x96b63909074d5df1faf8e20e10238b41b7f816bf2c8e70102fd7c7600f2877ce\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IMasterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool deployer interface.\\ninterface IMasterDeployer {\\n    function barFee() external view returns (uint256);\\n\\n    function barFeeTo() external view returns (address);\\n\\n    function bento() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function pools(address pool) external view returns (bool);\\n\\n    function deployPool(address factory, bytes calldata deployData) external returns (address);\\n}\\n\",\"keccak256\":\"0x91c23deb7e4372faa35a0ae4ef6ccd684049aea7b2c75cf63009b28591b91cbc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data) external returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data) external returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data) external view returns (uint256 finalAmountOut);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\\n    function getAmountIn(bytes calldata data) external view returns (uint256 finalAmountIn);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(address indexed recipient, address indexed tokenIn, address indexed tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\\n\",\"keccak256\":\"0xa6f92ccb525b018c0c209819640e8d746f1134b4c4d9acd4f22d3e170323f1fa\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ISolidlyPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IMasterDeployer.sol\\\";\\n\\ninterface ISolidlyPoolFactory {\\n    function getDeployData() external view returns (bytes memory, IMasterDeployer);\\n}\\n\",\"keccak256\":\"0xe03abb374b67910a2cc391638e14440dec8862f81252ee2741c25e642163a8a4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/RebaseLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8;\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library\\nlibrary RebaseLibrary {\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(Rebase memory total, uint256 elastic) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = (elastic * total.base) / total.elastic;\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(Rebase memory total, uint256 base) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = (base * total.elastic) / total.base;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa83360497e7e2a04332211832a8ceb41ef0301892fcf1b17174d7d4466782d44\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/TridentMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident sqrt helper library.\\nlibrary TridentMath {\\n    /// @dev Modified from Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x00f47aea66a53ed0d1c9ac30dfb319c5c78247ea92375ed408ed3b52fc8325d2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/solidly/SolidlyPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@rari-capital/solmate/src/utils/ReentrancyGuard.sol\\\";\\nimport {IBentoBoxMinimal} from \\\"../../interfaces/IBentoBoxMinimal.sol\\\";\\nimport {ISolidlyPoolFactory} from \\\"../../interfaces/ISolidlyPoolFactory.sol\\\";\\nimport {IMasterDeployer} from \\\"../../interfaces/IMasterDeployer.sol\\\";\\nimport {IPool} from \\\"../../interfaces/IPool.sol\\\";\\nimport {TridentMath} from \\\"../../libraries/TridentMath.sol\\\";\\n\\ncontract SolidlyPool is IPool, ERC20, ReentrancyGuard {\\n    uint256 internal constant MINIMUM_LIQUIDITY = 10**3;\\n\\n    address public immutable token0;\\n    address public immutable token1;\\n\\n    IBentoBoxMinimal public immutable bento;\\n    IMasterDeployer public immutable masterDeployer;\\n\\n    uint256 internal immutable decimals0;\\n    uint256 internal immutable decimals1;\\n\\n    uint128 public reserve0;\\n    uint128 public reserve1;\\n\\n    address public feeTo;\\n    uint256 public kLast;\\n    uint256 public barFee;\\n    address public barFeeTo;\\n\\n    error NotSupported();\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1, address indexed recipient);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint256 reserve0, uint256 reserve1);\\n\\n    bytes32 public constant override poolIdentifier = \\\"Trident:SolidlyPool\\\";\\n\\n    constructor() ERC20(\\\"\\\", \\\"SLP\\\", 18) {\\n        (bytes memory _deployData, IMasterDeployer _masterDeployer) = ISolidlyPoolFactory(msg.sender).getDeployData();\\n\\n        (address _token0, address _token1) = abi.decode(_deployData, (address, address));\\n\\n        (token0, token1) = (_token0, _token1);\\n\\n        name = string(abi.encodePacked(\\\"Trident Solidly Pool - \\\", ERC20(_token0).symbol(), \\\"/\\\", ERC20(_token1).symbol()));\\n\\n        decimals0 = 10**ERC20(_token0).decimals();\\n        decimals1 = 10**ERC20(_token1).decimals();\\n\\n        bento = IBentoBoxMinimal(_masterDeployer.bento());\\n        barFee = _masterDeployer.barFee();\\n        barFeeTo = _masterDeployer.barFeeTo();\\n\\n        masterDeployer = _masterDeployer;\\n    }\\n\\n    function getAssets() public view override returns (address[] memory assets) {\\n        assets = new address[](2);\\n        assets[0] = token0;\\n        assets[1] = token1;\\n    }\\n\\n    function getReserves() public view returns (uint256 _reserve0, uint256 _reserve1) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n    }\\n\\n    function _update(uint256 balance0, uint256 balance1) internal {\\n        reserve0 = uint128(balance0);\\n        reserve1 = uint128(balance1);\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    function mint(bytes calldata data) external nonReentrant returns (uint256 liquidity) {\\n        address recipient = abi.decode(data, (address));\\n        (uint256 _reserve0, uint256 _reserve1) = (reserve0, reserve1);\\n        (uint256 balance0, uint256 balance1) = _balance();\\n        uint256 amount0 = balance0 - _reserve0;\\n        uint256 amount1 = balance1 - _reserve1;\\n\\n        (uint256 _totalSupply, ) = _mintFee(_reserve0, _reserve1);\\n\\n        if (_totalSupply == 0) {\\n            liquidity = _kFromShares(amount0, amount1) - MINIMUM_LIQUIDITY;\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n        } else {\\n            liquidity = _min((amount0 * _totalSupply) / _reserve0, (amount1 * _totalSupply) / _reserve1);\\n        }\\n\\n        _mint(recipient, liquidity);\\n        _update(balance0, balance1);\\n        kLast = _fourthRootK(balance0, balance1);\\n\\n        emit Mint(msg.sender, amount0, amount1, recipient);\\n    }\\n\\n    function burn(bytes calldata data) external override nonReentrant returns (IPool.TokenAmount[] memory withdrawnAmounts) {\\n        address to = abi.decode(data, (address));\\n        (uint256 _reserve0, uint256 _reserve1) = (reserve0, reserve1);\\n        (address _token0, address _token1) = (token0, token1);\\n        (uint256 balance0, uint256 balance1) = _balance();\\n        uint256 _liquidity = balanceOf[address(this)];\\n\\n        (uint256 _totalSupply, ) = _mintFee(_reserve0, _reserve1);\\n\\n        uint256 amount0 = (_liquidity * balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        uint256 amount1 = (_liquidity * balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n\\n        _burn(address(this), _liquidity);\\n        _transferShares(_token0, amount0, to, false);\\n        _transferShares(_token1, amount1, to, false);\\n\\n        // This is safe from underflow - amounts are lesser figures derived from balances.\\n        unchecked {\\n            balance0 -= amount0;\\n            balance1 -= amount1;\\n        }\\n\\n        withdrawnAmounts = new TokenAmount[](2);\\n        withdrawnAmounts[0] = TokenAmount({token: address(token0), amount: amount0});\\n        withdrawnAmounts[1] = TokenAmount({token: address(token1), amount: amount1});\\n\\n        _update(balance0, balance1);\\n        kLast = _fourthRootK(balance0, balance1);\\n\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    function swap(bytes calldata data) external override nonReentrant returns (uint256 amountOut) {\\n        (bool zeroForOne, address recipient) = abi.decode(data, (bool, address));\\n        (address _token0, address _token1) = (token0, token1);\\n        (uint128 _reserve0, uint128 _reserve1) = (reserve0, reserve1);\\n\\n        require(_reserve0 != 0);\\n\\n        (uint256 balance0, uint256 balance1) = _balance();\\n        uint256 amountIn;\\n\\n        if (zeroForOne) {\\n            amountIn = balance0 - _reserve0;\\n            amountIn -= amountIn / 10000;\\n            amountOut = _getAmountOutFromShares(amountIn, _token0, _reserve0, _reserve1);\\n            balance1 -= amountOut;\\n        } else {\\n            amountIn = balance1 - _reserve1;\\n            amountIn -= amountIn / 10000;\\n            amountOut = _getAmountOutFromShares(amountIn, _token1, _reserve0, _reserve1);\\n            balance0 -= amountOut;\\n        }\\n\\n        _transferShares(zeroForOne ? token1 : token0, amountOut, recipient, false);\\n        _update(balance0, balance1);\\n\\n        emit Swap(recipient, zeroForOne ? token0 : token1, zeroForOne ? token1 : token0, amountIn, amountOut);\\n    }\\n\\n    // Mints LP tokens according to the difference between kLast and current reserves.\\n    function _mintFee(uint256 _reserve0, uint256 _reserve1) internal returns (uint256 _totalSupply, uint256 computed) {\\n        _totalSupply = totalSupply;\\n        uint256 _kLast = kLast;\\n        if (_kLast != 0) {\\n            computed = _fourthRootK(_reserve0, _reserve1);\\n            if (computed > _kLast) {\\n                // `barFee` % of increase in liquidity.\\n                uint256 _barFee = barFee;\\n                uint256 numerator = _totalSupply * (computed - _kLast) * _barFee;\\n                uint256 denominator = (10000 - _barFee) * computed + _barFee * _kLast;\\n                uint256 liquidity = numerator / denominator;\\n\\n                if (liquidity != 0) {\\n                    _mint(barFeeTo, liquidity);\\n                    _totalSupply += liquidity;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _fourthRootK(uint256 _reserve0, uint256 _reserve1) internal view returns (uint256) {\\n        return TridentMath.sqrt(TridentMath.sqrt(_kFromShares(_reserve0, _reserve1)) * 1e18);\\n    }\\n\\n    function getAmountOut(bytes calldata data) public view override returns (uint256 finalAmountOut) {\\n        (address tokenIn, uint256 amountIn) = abi.decode(data, (address, uint256));\\n        (uint256 _reserve0, uint256 _reserve1) = (reserve0, reserve1);\\n        amountIn -= amountIn / 10000; // remove fee from amount received\\n        finalAmountOut = _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\n    }\\n\\n    function getAmountOut(uint256 amountIn, address tokenIn) external view returns (uint256) {\\n        (uint256 _reserve0, uint256 _reserve1) = (reserve0, reserve1);\\n        amountIn -= amountIn / 10000; // remove fee from amount received\\n        return _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\n    }\\n\\n    function _getAmountOutFromShares(\\n        uint256 amountIn,\\n        address tokenIn,\\n        uint256 _reserve0,\\n        uint256 _reserve1\\n    ) internal view returns (uint256 amountOut) {\\n        // todo optimise use of tokenIn parameter\\n        amountOut = _getAmountOut(\\n            bento.toAmount(tokenIn, amountIn, false),\\n            tokenIn,\\n            bento.toAmount(token0, _reserve0, false),\\n            bento.toAmount(token1, _reserve1, false)\\n        );\\n        amountOut = bento.toShare(tokenIn == token0 ? token1 : token0, amountOut, false);\\n    }\\n\\n    function _getAmountOut(\\n        uint256 amountIn,\\n        address tokenIn,\\n        uint256 _reserve0,\\n        uint256 _reserve1\\n    ) internal view returns (uint256) {\\n        uint256 xy = _k(_reserve0, _reserve1);\\n        _reserve0 = (_reserve0 * 1e18) / decimals0;\\n        _reserve1 = (_reserve1 * 1e18) / decimals1;\\n        (uint256 reserveA, uint256 reserveB) = tokenIn == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\n        amountIn = tokenIn == token0 ? (amountIn * 1e18) / decimals0 : (amountIn * 1e18) / decimals1;\\n        uint256 y = reserveB - _get_y(amountIn + reserveA, xy, reserveB);\\n        return (y * (tokenIn == token0 ? decimals1 : decimals0)) / 1e18;\\n    }\\n\\n    function _kFromShares(uint256 x, uint256 y) internal view returns (uint256) {\\n        x = bento.toAmount(token0, x, false);\\n        y = bento.toAmount(token0, y, false);\\n        return _k(x, y);\\n    }\\n\\n    function _k(uint256 x, uint256 y) internal view returns (uint256) {\\n        uint256 _x = (x * 1e18) / decimals0;\\n        uint256 _y = (y * 1e18) / decimals1;\\n        uint256 _a = (_x * _y) / 1e18;\\n        uint256 _b = ((_x * _x) / 1e18 + (_y * _y) / 1e18);\\n        return (_a * _b) / 1e18; // x3y+y3x >= k\\n    }\\n\\n    function _f(uint256 x0, uint256 y) internal pure returns (uint256) {\\n        return (x0 * ((((y * y) / 1e18) * y) / 1e18)) / 1e18 + (((((x0 * x0) / 1e18) * x0) / 1e18) * y) / 1e18;\\n    }\\n\\n    function _d(uint256 x0, uint256 y) internal pure returns (uint256) {\\n        return (3 * x0 * ((y * y) / 1e18)) / 1e18 + ((((x0 * x0) / 1e18) * x0) / 1e18);\\n    }\\n\\n    function _get_y(\\n        uint256 x0,\\n        uint256 xy,\\n        uint256 y\\n    ) internal pure returns (uint256) {\\n        for (uint256 i = 0; i < 255; i++) {\\n            uint256 y_prev = y;\\n            uint256 k = _f(x0, y);\\n            if (k < xy) {\\n                uint256 dy = ((xy - k) * 1e18) / _d(x0, y);\\n                y = y + dy;\\n            } else {\\n                uint256 dy = ((k - xy) * 1e18) / _d(x0, y);\\n                y = y - dy;\\n            }\\n            if (y > y_prev) {\\n                if (y - y_prev <= 1) {\\n                    return y;\\n                }\\n            } else {\\n                if (y_prev - y <= 1) {\\n                    return y;\\n                }\\n            }\\n        }\\n        return y;\\n    }\\n\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function _transferShares(\\n        address token,\\n        uint256 shares,\\n        address to,\\n        bool unwrapBento\\n    ) internal {\\n        if (unwrapBento) {\\n            bento.withdraw(token, address(this), to, 0, shares);\\n        } else {\\n            bento.transfer(token, address(this), to, shares);\\n        }\\n    }\\n\\n    function _balance() internal view returns (uint256 balance0, uint256 balance1) {\\n        balance0 = bento.balanceOf(token0, address(this));\\n        balance1 = bento.balanceOf(token1, address(this));\\n    }\\n\\n    function getAmountIn(bytes calldata) public pure override returns (uint256) {\\n        revert NotSupported();\\n    }\\n\\n    function flashSwap(bytes calldata) public pure override returns (uint256) {\\n        revert NotSupported();\\n    }\\n\\n    function burnSingle(bytes calldata) public pure override returns (uint256) {\\n        revert NotSupported();\\n    }\\n}\\n\",\"keccak256\":\"0x6a5f8ff63e95dbd3c8f8cb3a41022b575734e0d905ad9e04e13c7486d7cbb141\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/solidly/SolidlyPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport {PoolDeployer} from \\\"../../abstract/PoolDeployer.sol\\\";\\nimport {SolidlyPool} from \\\"./SolidlyPool.sol\\\";\\nimport {IMasterDeployer} from \\\"../../interfaces/IMasterDeployer.sol\\\";\\nimport {ISolidlyPoolFactory} from \\\"../../interfaces/ISolidlyPoolFactory.sol\\\";\\n\\n/// @notice Contract for deploying Trident Solidly Pool with configurations.\\ncontract SolidlyPoolFactory is ISolidlyPoolFactory, PoolDeployer {\\n    bytes32 public constant bytecodeHash = keccak256(type(SolidlyPool).creationCode);\\n\\n    bytes private cachedDeployData;\\n\\n    constructor(address _masterDeployer) PoolDeployer(_masterDeployer) {}\\n\\n    function deployPool(bytes memory _deployData) external returns (address pool) {\\n        (address tokenA, address tokenB) = abi.decode(_deployData, (address, address));\\n\\n        if (tokenA > tokenB) {\\n            (tokenA, tokenB) = (tokenB, tokenA);\\n        }\\n\\n        // Strips any extra data.\\n        _deployData = abi.encode(tokenA, tokenB);\\n\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = tokenA;\\n        tokens[1] = tokenB;\\n\\n        bytes32 salt = keccak256(_deployData);\\n\\n        cachedDeployData = _deployData;\\n\\n        pool = address(new SolidlyPool{salt: salt}());\\n\\n        cachedDeployData = \\\"\\\";\\n\\n        _registerPool(pool, tokens, salt);\\n    }\\n\\n    // This called in the ConstantProductPool constructor.\\n    function getDeployData() external view override returns (bytes memory, IMasterDeployer) {\\n        return (cachedDeployData, IMasterDeployer(masterDeployer));\\n    }\\n\\n    function calculatePoolAddress(address token0, address token1) external view returns (address) {\\n        bytes32 salt = keccak256(abi.encode(token0, token1));\\n        bytes32 hash = keccak256(abi.encodePacked(bytes1(0xff), address(this), salt, bytecodeHash));\\n        return address(uint160(uint256(hash)));\\n    }\\n}\\n\",\"keccak256\":\"0x95c1426221e8dd6fb1f19d5e99ff5e8dfbbd5351df4dc47d46ca9b50316a8bbd\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051614d2d380380614d2d83398101604081905261002f91610069565b806001600160a01b0381166100575760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b031660805250610099565b60006020828403121561007b57600080fd5b81516001600160a01b038116811461009257600080fd5b9392505050565b608051614c6b6100c2600039600081816101b0015281816106d001526107a30152614c6b6000f3fe60806040523480156200001157600080fd5b5060043610620000b05760003560e01c80635bc93d6c116200007f578063cf58879a1162000062578063cf58879a14620001aa578063d039f62214620001d2578063f6ab6d9914620001ec57600080fd5b80635bc93d6c146200013d57806371a25812146200018457600080fd5b8063169c4cef14620000b5578063209b673814620000f657806327c3cae1146200010d578063420c6a2c1462000124575b600080fd5b620000cc620000c636600462000bc7565b62000225565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b620000cc6200010736600462000c0d565b62000278565b620000cc6200011e36600462000c7a565b620003b1565b6200012e62000570565b604051908152602001620000ed565b6200012e6200014e36600462000c0d565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526020818152604080832093909416825291909152205490565b6200019b6200019536600462000d53565b6200059f565b604051620000ed919062000d9e565b620000cc7f000000000000000000000000000000000000000000000000000000000000000081565b620001dc620006c8565b604051620000ed92919062000dfa565b620000cc620001fd36600462000e8e565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b600060205282600052604060002060205281600052604060002081815481106200024e57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b6000808383604051602001620002b192919073ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b604051602081830303815290604052805190602001209050600060ff60f81b308360405180602001620002e49062000aed565b6020820181038252601f19601f82011660405250805190602001206040516020016200037294939291907fff0000000000000000000000000000000000000000000000000000000000000094909416845260609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830152603582015260550190565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152919052805160209091012095945050505050565b600080600083806020019051810190620003cc919062000ea8565b915091508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1611156200040757905b6040805173ffffffffffffffffffffffffffffffffffffffff848116602083015283168183015281518082038301815260026060830181815260c0840185529197506000939192909160809091019080368337019050509050828160008151811062000477576200047762000edc565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600181518110620004c857620004c862000edc565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101820152855190860181812091620005039160029162000afb565b5080604051620005139062000aed565b8190604051809103906000f590508015801562000534573d6000803e3d6000fd5b5060408051602081019182905260009081905291965062000559916002919062000afb565b50620005678583836200078b565b50505050919050565b604051620005816020820162000aed565b6020820181038252601f19601f820116604052508051906020012081565b60608167ffffffffffffffff811115620005bd57620005bd62000c4b565b604051908082528060200260200182016040528015620005e7578160200160208202803683370190505b50905060005b82811015620006bf5773ffffffffffffffffffffffffffffffffffffffff80871660009081526020818152604080832093891683529290522062000632828662000f3a565b8154811062000645576200064562000edc565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811062000685576200068562000edc565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280620006b68162000f55565b915050620005ed565b50949350505050565b6060600060027f0000000000000000000000000000000000000000000000000000000000000000818054620006fd9062000f91565b80601f01602080910402602001604051908101604052809291908181526020018280546200072b9062000f91565b80156200077c5780601f1062000750576101008083540402835291602001916200077c565b820191906000526020600020905b8154815290600101906020018083116200075e57829003601f168201915b50505050509150915091509091565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614620007fb576040517f03781a5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081815260016020526040812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b600183510381101562000ae7578281600101815181106200086d576200086d62000edc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16838281518110620008a057620008a062000edc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1610620008f6576040517f3f06bf8100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181015b835181101562000add576000808584815181106200091d576200091d62000edc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085838151811062000976576200097662000edc565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff90811683528282019390935260409091016000908120805460018101825590825291812090910180547fffffffffffffffffffffffff000000000000000000000000000000000000000016928816929092179091558451819086908490811062000a055762000a0562000edc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085848151811062000a5e5762000a5e62000edc565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff908116835282820193909352604090910160009081208054600180820183559183529290912090910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169288169290921790915501620008fb565b5060010162000848565b50505050565b613c4e8062000fe883390190565b82805462000b099062000f91565b90600052602060002090601f01602090048101928262000b2d576000855562000b78565b82601f1062000b4857805160ff191683800117855562000b78565b8280016001018555821562000b78579182015b8281111562000b7857825182559160200191906001019062000b5b565b5062000b8692915062000b8a565b5090565b5b8082111562000b86576000815560010162000b8b565b73ffffffffffffffffffffffffffffffffffffffff8116811462000bc457600080fd5b50565b60008060006060848603121562000bdd57600080fd5b833562000bea8162000ba1565b9250602084013562000bfc8162000ba1565b929592945050506040919091013590565b6000806040838503121562000c2157600080fd5b823562000c2e8162000ba1565b9150602083013562000c408162000ba1565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121562000c8d57600080fd5b813567ffffffffffffffff8082111562000ca657600080fd5b818401915084601f83011262000cbb57600080fd5b81358181111562000cd05762000cd062000c4b565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171562000d195762000d1962000c4b565b8160405282815287602084870101111562000d3357600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000806000806080858703121562000d6a57600080fd5b843562000d778162000ba1565b9350602085013562000d898162000ba1565b93969395505050506040820135916060013590565b6020808252825182820181905260009190848201906040850190845b8181101562000dee57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010162000dba565b50909695505050505050565b604081526000835180604084015260005b8181101562000e2a576020818701810151606086840101520162000e0b565b8181111562000e3d576000606083860101525b5073ffffffffffffffffffffffffffffffffffffffff93909316602083015250601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601606001919050565b60006020828403121562000ea157600080fd5b5035919050565b6000806040838503121562000ebc57600080fd5b825162000ec98162000ba1565b602084015190925062000c408162000ba1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111562000f505762000f5062000f0b565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000f8a5762000f8a62000f0b565b5060010190565b600181811c9082168062000fa657607f821691505b6020821081141562000fe1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fe6101a060405260016006553480156200001757600080fd5b5060405180602001604052806000815250604051806040016040528060038152602001620534c560ec1b815250601282600090805190602001906200005e92919062000550565b5081516200007490600190602085019062000550565b5060ff81166080524660a0526200008a620004b4565b60c08181525050505050600080336001600160a01b031663d039f6226040518163ffffffff1660e01b8152600401600060405180830381865afa158015620000d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001009190810190620006d4565b91509150600080838060200190518101906200011d919062000740565b6001600160a01b0380821661010052821660e0819052604080516395d89b4160e01b81529051939550919350916395d89b41916004808201926000929091908290030181865afa15801562000176573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001a0919081019062000774565b816001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620001df573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000209919081019062000774565b6040516020016200021c929190620007c9565b604051602081830303815290604052600090805190602001906200024292919062000550565b50816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000282573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002a8919062000832565b620002b590600a62000973565b6101608181525050806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000322919062000832565b6200032f90600a62000973565b6101808181525050826001600160a01b0316634da318276040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000376573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200039c919062000984565b6001600160a01b0316610120816001600160a01b031681525050826001600160a01b031663c14ad8026040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200041b9190620009a4565b600a81905550826001600160a01b0316630c0a0cd26040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000460573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000486919062000984565b600b80546001600160a01b0319166001600160a01b0392831617905592909216610140525062000a9f915050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620004e89190620009fb565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b8280546200055e90620009be565b90600052602060002090601f016020900481019282620005825760008555620005cd565b82601f106200059d57805160ff1916838001178555620005cd565b82800160010185558215620005cd579182015b82811115620005cd578251825591602001919060010190620005b0565b50620005db929150620005df565b5090565b5b80821115620005db5760008155600101620005e0565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620006295781810151838201526020016200060f565b8381111562000639576000848401525b50505050565b60006001600160401b03808411156200065c576200065c620005f6565b604051601f8501601f19908116603f01168101908282118183101715620006875762000687620005f6565b81604052809350858152868686011115620006a157600080fd5b620006b18660208301876200060c565b5050509392505050565b6001600160a01b0381168114620006d157600080fd5b50565b60008060408385031215620006e857600080fd5b82516001600160401b03811115620006ff57600080fd5b8301601f810185136200071157600080fd5b62000722858251602084016200063f565b92505060208301516200073581620006bb565b809150509250929050565b600080604083850312156200075457600080fd5b82516200076181620006bb565b60208401519092506200073581620006bb565b6000602082840312156200078757600080fd5b81516001600160401b038111156200079e57600080fd5b8201601f81018413620007b057600080fd5b620007c1848251602084016200063f565b949350505050565b7f54726964656e7420536f6c69646c7920506f6f6c202d20000000000000000000815260008351620008038160178501602088016200060c565b602f60f81b6017918401918201528351620008268160188401602088016200060c565b01601801949350505050565b6000602082840312156200084557600080fd5b815160ff811681146200085757600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620008b55781600019048211156200089957620008996200085e565b80851615620008a757918102915b93841c939080029062000879565b509250929050565b600082620008ce575060016200096d565b81620008dd575060006200096d565b8160018114620008f65760028114620009015762000921565b60019150506200096d565b60ff8411156200091557620009156200085e565b50506001821b6200096d565b5060208310610133831016604e8410600b841016171562000946575081810a6200096d565b62000952838362000874565b80600019048211156200096957620009696200085e565b0290505b92915050565b60006200085760ff841683620008bd565b6000602082840312156200099757600080fd5b81516200085781620006bb565b600060208284031215620009b757600080fd5b5051919050565b600181811c90821680620009d357607f821691505b60208210811415620009f557634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c91508083168062000a1857607f831692505b602080841082141562000a3957634e487b7160e01b86526022600452602486fd5b81801562000a50576001811462000a625762000a91565b60ff1986168952848901965062000a91565b60008a81526020902060005b8681101562000a895781548b82015290850190830162000a6e565b505084890196505b509498975050505050505050565b60805160a05160c05160e051610100516101205161014051610160516101805161301862000c366000396000818161239c01528181612492015281816125b7015261272401526000818161235d015281816124d40152818161259101526126e30152600061057401526000818161043b015281816117760152818161184f01528181611a8801528181611b5501528181611d4f01528181611e2f01528181611f0f01528181611f8301528181612169015261224c01526000818161059b0152818161096a01528181610acc01528181610cb201528181610e3b01528181610e9b01528181610ed8015281816110320152818161181e01528181611ed901526120380152600081816103330152818161094901528181610a6301528181610c9001528181610e1501528181610e7501528181610efe01528181610fc40152818161174301528181611df701528181611fbf015281816120120152818161213001528181612213015281816123de0152818161243f015261253e01526000610be201526000610bad015260006103bd01526130186000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c8063627dd56a1161012a578063a8f1f52e116100bd578063cf58879a1161008c578063d505accf11610071578063d505accf146105bd578063dd62ed3e146105d2578063f140a35a146105fd57600080fd5b8063cf58879a1461056f578063d21220a71461059657600080fd5b8063a8f1f52e14610540578063a9059cbb14610553578063af8c09bf14610275578063c14ad8021461056657600080fd5b80637ba0e2e7116100f95780637ba0e2e7146104de5780637ecebe00146104f157806395d89b4114610511578063a69840a81461051957600080fd5b8063627dd56a1461048d57806367e4ac2c146104a057806370a08231146104b55780637464fc3d146104d557600080fd5b806323b872dd116101bd5780633644e5151161018c578063499a3c5011610171578063499a3c50146102755780634da31827146104365780635a76f25e1461045d57600080fd5b80633644e515146103f1578063443cb4bc146103f957600080fd5b806323b872dd1461035e5780632a07b6c71461037157806330adf81f14610391578063313ce567146103b857600080fd5b8063095ea7b3116101f9578063095ea7b3146102eb5780630c0a0cd21461030e5780630dfe16811461032e57806318160ddd1461035557600080fd5b8063017e7e581461022b578063053da1c81461027557806306fdde03146102965780630902f1ac146102ab575b600080fd5b60085461024b9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6102886102833660046129fb565b610610565b60405190815260200161026c565b61029e610644565b60405161026c9190612a6d565b600754604080516fffffffffffffffffffffffffffffffff808416825270010000000000000000000000000000000090930490921660208301520161026c565b6102fe6102f9366004612b05565b6106d2565b604051901515815260200161026c565b600b5461024b9073ffffffffffffffffffffffffffffffffffffffff1681565b61024b7f000000000000000000000000000000000000000000000000000000000000000081565b61028860025481565b6102fe61036c366004612b31565b61074b565b61038461037f3660046129fb565b610891565b60405161026c9190612b72565b6102887f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6103df7f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff909116815260200161026c565b610288610ba9565b600754610415906fffffffffffffffffffffffffffffffff1681565b6040516fffffffffffffffffffffffffffffffff909116815260200161026c565b61024b7f000000000000000000000000000000000000000000000000000000000000000081565b6007546104159070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1681565b61028861049b3660046129fb565b610c04565b6104a8610fa2565b60405161026c9190612bd7565b6102886104c3366004612c31565b60036020526000908152604090205481565b61028860095481565b6102886104ec3660046129fb565b6110a1565b6102886104ff366004612c31565b60056020526000908152604090205481565b61029e61127a565b6102887f54726964656e743a536f6c69646c79506f6f6c0000000000000000000000000081565b61028861054e3660046129fb565b611287565b6102fe610561366004612b05565b6112f8565b610288600a5481565b61024b7f000000000000000000000000000000000000000000000000000000000000000081565b61024b7f000000000000000000000000000000000000000000000000000000000000000081565b6105d06105cb366004612c4e565b61137d565b005b6102886105e0366004612cc5565b600460209081526000928352604080842090915290825290205481565b61028861060b366004612cfe565b6116a9565b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805461065190612d23565b80601f016020809104026020016040519081016040528092919081815260200182805461067d90612d23565b80156106ca5780601f1061069f576101008083540402835291602001916106ca565b820191906000526020600020905b8154815290600101906020018083116106ad57829003601f168201915b505050505081565b33600081815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061073a9086815260200190565b60405180910390a350600192915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526004602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107df576107ad8382612da0565b73ffffffffffffffffffffffffffffffffffffffff861660009081526004602090815260408083203384529091529020555b73ffffffffffffffffffffffffffffffffffffffff851660009081526003602052604081208054859290610814908490612da0565b909155505073ffffffffffffffffffffffffffffffffffffffff808516600081815260036020526040908190208054870190555190918716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061087c9087815260200190565b60405180910390a360019150505b9392505050565b6060600654600114610904576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f5245454e5452414e43590000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6002600655600061091783850185612c31565b6007549091506fffffffffffffffffffffffffffffffff808216917001000000000000000000000000000000009004167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000600080610994611706565b306000908152600360205260408120549294509092506109b488886118c2565b5090506000816109c48685612db7565b6109ce9190612df4565b90506000826109dd8686612db7565b6109e79190612df4565b90506109f3308561198b565b610a0088838d6000611a21565b610a0d87828d6000611a21565b604080516002808252606082019092529683900396958290039590816020015b6040805180820190915260008082526020820152815260200190600190039081610a2d579050509b5060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001838152508c600081518110610ab457610ab4612e2f565b602002602001018190525060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001828152508c600181518110610b1d57610b1d612e2f565b6020026020010181905250610b328686611bb8565b610b3c8686611c32565b600955604080518381526020810183905273ffffffffffffffffffffffffffffffffffffffff8d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050600160065550979a9950505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614610bdf57610bda611c5b565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b6000600654600114610c72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f5245454e5452414e43590000000000000000000000000000000000000000000060448201526064016108fb565b6002600655600080610c8684860186612e5e565b60075491935091507f0000000000000000000000000000000000000000000000000000000000000000907f0000000000000000000000000000000000000000000000000000000000000000906fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041681610d0657600080fd5b600080610d11611706565b9150915060008815610d9657610d396fffffffffffffffffffffffffffffffff861684612da0565b9050610d4761271082612df4565b610d519082612da0565b9050610d838188876fffffffffffffffffffffffffffffffff16876fffffffffffffffffffffffffffffffff16611cf5565b9950610d8f8a83612da0565b9150610e0b565b610db26fffffffffffffffffffffffffffffffff851683612da0565b9050610dc061271082612df4565b610dca9082612da0565b9050610dfc8187876fffffffffffffffffffffffffffffffff16876fffffffffffffffffffffffffffffffff16611cf5565b9950610e088a84612da0565b92505b610e6489610e39577f0000000000000000000000000000000000000000000000000000000000000000610e5b565b7f00000000000000000000000000000000000000000000000000000000000000005b8b8a6000611a21565b610e6e8383611bb8565b88610e99577f0000000000000000000000000000000000000000000000000000000000000000610ebb565b7f00000000000000000000000000000000000000000000000000000000000000005b73ffffffffffffffffffffffffffffffffffffffff1689610efc577f0000000000000000000000000000000000000000000000000000000000000000610f1e565b7f00000000000000000000000000000000000000000000000000000000000000005b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062848e604051610f85929190918252602082015260400190565b60405180910390a450506001600655509598975050505050505050565b60408051600280825260608083018452926020830190803683370190505090507f000000000000000000000000000000000000000000000000000000000000000081600081518110610ff657610ff6612e2f565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061106457611064612e2f565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505090565b600060065460011461110f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f5245454e5452414e43590000000000000000000000000000000000000000000060448201526064016108fb565b6002600655600061112283850185612c31565b6007549091506fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041660008061115d611706565b9092509050600061116e8584612da0565b9050600061117c8584612da0565b9050600061118a87876118c2565b509050806111bd576103e861119f84846120f3565b6111a99190612da0565b98506111b860006103e86122c5565b6111f2565b6111ef876111cb8386612db7565b6111d59190612df4565b876111e08486612db7565b6111ea9190612df4565b612336565b98505b6111fc888a6122c5565b6112068585611bb8565b6112108585611c32565b600955604080518481526020810184905273ffffffffffffffffffffffffffffffffffffffff8a169133917fdbba30eb0402b389513e87f51f4db2db80bed454384ec6925a24097c3548a02a910160405180910390a3505060016006555094979650505050505050565b6001805461065190612d23565b6000808061129784860186612b05565b60075491935091506fffffffffffffffffffffffffffffffff808216917001000000000000000000000000000000009004166112d561271084612df4565b6112df9084612da0565b92506112ed8385848461234c565b979650505050505050565b33600090815260036020526040812080548391908390611319908490612da0565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600081815260036020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061073a9086815260200190565b428410156113e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5045524d49545f444541444c494e455f4558504952454400000000000000000060448201526064016108fb565b60006113f1610ba9565b73ffffffffffffffffffffffffffffffffffffffff89811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938c166060840152608083018b905260a083019390935260c08083018a90528151808403909101815260e0830190915280519201919091207f190100000000000000000000000000000000000000000000000000000000000061010083015261010282019290925261012281019190915261014201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611550573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158015906115cb57508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f5349474e455200000000000000000000000000000000000060448201526064016108fb565b73ffffffffffffffffffffffffffffffffffffffff90811660009081526004602090815260408083208b8516808552908352928190208a905551898152919350918a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b6007546000906fffffffffffffffffffffffffffffffff808216917001000000000000000000000000000000009004166116e561271086612df4565b6116ef9086612da0565b94506116fd8585848461234c565b95945050505050565b6040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600483015230602483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063f7888aec90604401602060405180830381865afa1580156117bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e19190612e81565b6040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301523060248301529193507f00000000000000000000000000000000000000000000000000000000000000009091169063f7888aec90604401602060405180830381865afa158015611898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bc9190612e81565b90509091565b6002546009546000908015611983576118db8585611c32565b91508082111561198357600a546000816118f58486612da0565b6118ff9087612db7565b6119099190612db7565b905060006119178484612db7565b8561192485612710612da0565b61192e9190612db7565b6119389190612e9a565b905060006119468284612df4565b9050801561197e57600b546119719073ffffffffffffffffffffffffffffffffffffffff16826122c5565b61197b8188612e9a565b96505b505050505b509250929050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040812080548392906119c0908490612da0565b909155505060028054829003905560405181815260009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b8015611afb576040517f97da6d3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152306024830152838116604483015260006064830152608482018590527f000000000000000000000000000000000000000000000000000000000000000016906397da6d309060a40160408051808303816000875af1158015611ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af49190612eb2565b5050611bb2565b6040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301528381166044830152606482018590527f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90608401600060405180830381600087803b158015611b9957600080fd5b505af1158015611bad573d6000803e3d6000fd5b505050505b50505050565b6fffffffffffffffffffffffffffffffff828116700100000000000000000000000000000000838316810282811760078190556040805192861690941782529190910490921660208301527fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a910160405180910390a15050565b600061088a611c49611c4485856120f3565b6125f8565b611c4490670de0b6b3a7640000612db7565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051611c8d9190612ed6565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6040517f5662311800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820186905260006044830181905291611f7f917f00000000000000000000000000000000000000000000000000000000000000001690635662311890606401602060405180830381865afa158015611d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dba9190612e81565b6040517f5662311800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018790526000604483015287917f000000000000000000000000000000000000000000000000000000000000000090911690635662311890606401602060405180830381865afa158015611e78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9c9190612e81565b6040517f5662311800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201889052600060448301527f00000000000000000000000000000000000000000000000000000000000000001690635662311890606401602060405180830381865afa158015611f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7a9190612e81565b61234c565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663da5139ca7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614612036577f0000000000000000000000000000000000000000000000000000000000000000612058565b7f00000000000000000000000000000000000000000000000000000000000000005b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024810184905260006044820152606401602060405180830381865afa1580156120cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fd9190612e81565b6040517f5662311800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052600060448301819052917f000000000000000000000000000000000000000000000000000000000000000090911690635662311890606401602060405180830381865afa1580156121b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d69190612e81565b6040517f5662311800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201859052600060448301529194507f000000000000000000000000000000000000000000000000000000000000000090911690635662311890606401602060405180830381865afa158015612295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b99190612e81565b915061088a83836126de565b80600260008282546122d79190612e9a565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000818152600360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101611a15565b6000818310612345578161088a565b5090919050565b60008061235984846126de565b90507f000000000000000000000000000000000000000000000000000000000000000061238e85670de0b6b3a7640000612db7565b6123989190612df4565b93507f00000000000000000000000000000000000000000000000000000000000000006123cd84670de0b6b3a7640000612db7565b6123d79190612df4565b92506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614612436578486612439565b85855b915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146124d2577f00000000000000000000000000000000000000000000000000000000000000006124c389670de0b6b3a7640000612db7565b6124cd9190612df4565b61250f565b7f000000000000000000000000000000000000000000000000000000000000000061250589670de0b6b3a7640000612db7565b61250f9190612df4565b97506000612527612520848b612e9a565b85846127e7565b6125319083612da0565b9050670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16146125b5577f00000000000000000000000000000000000000000000000000000000000000006125d7565b7f00000000000000000000000000000000000000000000000000000000000000005b6125e19083612db7565b6125eb9190612df4565b9998505050505050505050565b600181700100000000000000000000000000000000811061261e5760409190911b9060801c5b6801000000000000000081106126395760209190911b9060401c5b64010000000081106126505760109190911b9060201c5b6201000081106126655760089190911b9060101c5b61010081106126795760049190911b9060081c5b6010811061268c5760029190911b9060041c5b6008811061269b578160011b91505b5080820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c808204818110156126d8578091505b50919050565b6000807f000000000000000000000000000000000000000000000000000000000000000061271485670de0b6b3a7640000612db7565b61271e9190612df4565b905060007f000000000000000000000000000000000000000000000000000000000000000061275585670de0b6b3a7640000612db7565b61275f9190612df4565b90506000670de0b6b3a76400006127768385612db7565b6127809190612df4565b90506000670de0b6b3a76400006127978480612db7565b6127a19190612df4565b670de0b6b3a76400006127b48680612db7565b6127be9190612df4565b6127c89190612e9a565b9050670de0b6b3a76400006127dd8284612db7565b6112ed9190612df4565b6000805b60ff8110156128ed5782600061280187836128f6565b9050858110156128515760006128178887612993565b6128218389612da0565b61283390670de0b6b3a7640000612db7565b61283d9190612df4565b90506128498187612e9a565b955050612893565b600061285d8887612993565b6128678884612da0565b61287990670de0b6b3a7640000612db7565b6128839190612df4565b905061288f8187612da0565b9550505b818511156128bc5760016128a78387612da0565b116128b75784935050505061088a565b6128d8565b60016128c88684612da0565b116128d85784935050505061088a565b505080806128e590612fa9565b9150506127eb565b50909392505050565b6000670de0b6b3a76400008281858161290f8280612db7565b6129199190612df4565b6129239190612db7565b61292d9190612df4565b6129379190612db7565b6129419190612df4565b670de0b6b3a76400008084816129578280612db7565b6129619190612df4565b61296b9190612db7565b6129759190612df4565b61297f9086612db7565b6129899190612df4565b61088a9190612e9a565b6000670de0b6b3a764000083816129aa8280612db7565b6129b49190612df4565b6129be9190612db7565b6129c89190612df4565b670de0b6b3a7640000806129dc8580612db7565b6129e69190612df4565b6129f1866003612db7565b61297f9190612db7565b60008060208385031215612a0e57600080fd5b823567ffffffffffffffff80821115612a2657600080fd5b818501915085601f830112612a3a57600080fd5b813581811115612a4957600080fd5b866020828501011115612a5b57600080fd5b60209290920196919550909350505050565b600060208083528351808285015260005b81811015612a9a57858101830151858201604001528201612a7e565b81811115612aac576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b73ffffffffffffffffffffffffffffffffffffffff81168114612b0257600080fd5b50565b60008060408385031215612b1857600080fd5b8235612b2381612ae0565b946020939093013593505050565b600080600060608486031215612b4657600080fd5b8335612b5181612ae0565b92506020840135612b6181612ae0565b929592945050506040919091013590565b602080825282518282018190526000919060409081850190868401855b82811015612bca578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101612b8f565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612c2557835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101612bf3565b50909695505050505050565b600060208284031215612c4357600080fd5b813561088a81612ae0565b600080600080600080600060e0888a031215612c6957600080fd5b8735612c7481612ae0565b96506020880135612c8481612ae0565b95506040880135945060608801359350608088013560ff81168114612ca857600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215612cd857600080fd5b8235612ce381612ae0565b91506020830135612cf381612ae0565b809150509250929050565b60008060408385031215612d1157600080fd5b823591506020830135612cf381612ae0565b600181811c90821680612d3757607f821691505b602082108114156126d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015612db257612db2612d71565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612def57612def612d71565b500290565b600082612e2a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008060408385031215612e7157600080fd5b82358015158114612ce357600080fd5b600060208284031215612e9357600080fd5b5051919050565b60008219821115612ead57612ead612d71565b500190565b60008060408385031215612ec557600080fd5b505080516020909101519092909150565b600080835481600182811c915080831680612ef257607f831692505b6020808410821415612f2b577f4e487b710000000000000000000000000000000000000000000000000000000086526022600452602486fd5b818015612f3f5760018114612f6e57612f9b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00861689528489019650612f9b565b60008a81526020902060005b86811015612f935781548b820152908501908301612f7a565b505084890196505b509498975050505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612fdb57612fdb612d71565b506001019056fea264697066735822122047dc40909cd3fcbb7771fa584d4fbcae460fe0947b9ec630b98e31f63c80197764736f6c634300080a0033a264697066735822122023773db0841ce73f225e9d1a204e9ec32d6d3d3ef9d0a31ca56cb60edaa0d43164736f6c634300080a0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000b05760003560e01c80635bc93d6c116200007f578063cf58879a1162000062578063cf58879a14620001aa578063d039f62214620001d2578063f6ab6d9914620001ec57600080fd5b80635bc93d6c146200013d57806371a25812146200018457600080fd5b8063169c4cef14620000b5578063209b673814620000f657806327c3cae1146200010d578063420c6a2c1462000124575b600080fd5b620000cc620000c636600462000bc7565b62000225565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b620000cc6200010736600462000c0d565b62000278565b620000cc6200011e36600462000c7a565b620003b1565b6200012e62000570565b604051908152602001620000ed565b6200012e6200014e36600462000c0d565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526020818152604080832093909416825291909152205490565b6200019b6200019536600462000d53565b6200059f565b604051620000ed919062000d9e565b620000cc7f000000000000000000000000000000000000000000000000000000000000000081565b620001dc620006c8565b604051620000ed92919062000dfa565b620000cc620001fd36600462000e8e565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b600060205282600052604060002060205281600052604060002081815481106200024e57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b6000808383604051602001620002b192919073ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b604051602081830303815290604052805190602001209050600060ff60f81b308360405180602001620002e49062000aed565b6020820181038252601f19601f82011660405250805190602001206040516020016200037294939291907fff0000000000000000000000000000000000000000000000000000000000000094909416845260609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830152603582015260550190565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152919052805160209091012095945050505050565b600080600083806020019051810190620003cc919062000ea8565b915091508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1611156200040757905b6040805173ffffffffffffffffffffffffffffffffffffffff848116602083015283168183015281518082038301815260026060830181815260c0840185529197506000939192909160809091019080368337019050509050828160008151811062000477576200047762000edc565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600181518110620004c857620004c862000edc565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101820152855190860181812091620005039160029162000afb565b5080604051620005139062000aed565b8190604051809103906000f590508015801562000534573d6000803e3d6000fd5b5060408051602081019182905260009081905291965062000559916002919062000afb565b50620005678583836200078b565b50505050919050565b604051620005816020820162000aed565b6020820181038252601f19601f820116604052508051906020012081565b60608167ffffffffffffffff811115620005bd57620005bd62000c4b565b604051908082528060200260200182016040528015620005e7578160200160208202803683370190505b50905060005b82811015620006bf5773ffffffffffffffffffffffffffffffffffffffff80871660009081526020818152604080832093891683529290522062000632828662000f3a565b8154811062000645576200064562000edc565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811062000685576200068562000edc565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280620006b68162000f55565b915050620005ed565b50949350505050565b6060600060027f0000000000000000000000000000000000000000000000000000000000000000818054620006fd9062000f91565b80601f01602080910402602001604051908101604052809291908181526020018280546200072b9062000f91565b80156200077c5780601f1062000750576101008083540402835291602001916200077c565b820191906000526020600020905b8154815290600101906020018083116200075e57829003601f168201915b50505050509150915091509091565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614620007fb576040517f03781a5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081815260016020526040812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b600183510381101562000ae7578281600101815181106200086d576200086d62000edc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16838281518110620008a057620008a062000edc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1610620008f6576040517f3f06bf8100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181015b835181101562000add576000808584815181106200091d576200091d62000edc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085838151811062000976576200097662000edc565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff90811683528282019390935260409091016000908120805460018101825590825291812090910180547fffffffffffffffffffffffff000000000000000000000000000000000000000016928816929092179091558451819086908490811062000a055762000a0562000edc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085848151811062000a5e5762000a5e62000edc565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff908116835282820193909352604090910160009081208054600180820183559183529290912090910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169288169290921790915501620008fb565b5060010162000848565b50505050565b613c4e8062000fe883390190565b82805462000b099062000f91565b90600052602060002090601f01602090048101928262000b2d576000855562000b78565b82601f1062000b4857805160ff191683800117855562000b78565b8280016001018555821562000b78579182015b8281111562000b7857825182559160200191906001019062000b5b565b5062000b8692915062000b8a565b5090565b5b8082111562000b86576000815560010162000b8b565b73ffffffffffffffffffffffffffffffffffffffff8116811462000bc457600080fd5b50565b60008060006060848603121562000bdd57600080fd5b833562000bea8162000ba1565b9250602084013562000bfc8162000ba1565b929592945050506040919091013590565b6000806040838503121562000c2157600080fd5b823562000c2e8162000ba1565b9150602083013562000c408162000ba1565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121562000c8d57600080fd5b813567ffffffffffffffff8082111562000ca657600080fd5b818401915084601f83011262000cbb57600080fd5b81358181111562000cd05762000cd062000c4b565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171562000d195762000d1962000c4b565b8160405282815287602084870101111562000d3357600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000806000806080858703121562000d6a57600080fd5b843562000d778162000ba1565b9350602085013562000d898162000ba1565b93969395505050506040820135916060013590565b6020808252825182820181905260009190848201906040850190845b8181101562000dee57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010162000dba565b50909695505050505050565b604081526000835180604084015260005b8181101562000e2a576020818701810151606086840101520162000e0b565b8181111562000e3d576000606083860101525b5073ffffffffffffffffffffffffffffffffffffffff93909316602083015250601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601606001919050565b60006020828403121562000ea157600080fd5b5035919050565b6000806040838503121562000ebc57600080fd5b825162000ec98162000ba1565b602084015190925062000c408162000ba1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111562000f505762000f5062000f0b565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000f8a5762000f8a62000f0b565b5060010190565b600181811c9082168062000fa657607f821691505b6020821081141562000fe1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fe6101a060405260016006553480156200001757600080fd5b5060405180602001604052806000815250604051806040016040528060038152602001620534c560ec1b815250601282600090805190602001906200005e92919062000550565b5081516200007490600190602085019062000550565b5060ff81166080524660a0526200008a620004b4565b60c08181525050505050600080336001600160a01b031663d039f6226040518163ffffffff1660e01b8152600401600060405180830381865afa158015620000d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001009190810190620006d4565b91509150600080838060200190518101906200011d919062000740565b6001600160a01b0380821661010052821660e0819052604080516395d89b4160e01b81529051939550919350916395d89b41916004808201926000929091908290030181865afa15801562000176573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001a0919081019062000774565b816001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620001df573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000209919081019062000774565b6040516020016200021c929190620007c9565b604051602081830303815290604052600090805190602001906200024292919062000550565b50816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000282573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002a8919062000832565b620002b590600a62000973565b6101608181525050806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000322919062000832565b6200032f90600a62000973565b6101808181525050826001600160a01b0316634da318276040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000376573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200039c919062000984565b6001600160a01b0316610120816001600160a01b031681525050826001600160a01b031663c14ad8026040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200041b9190620009a4565b600a81905550826001600160a01b0316630c0a0cd26040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000460573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000486919062000984565b600b80546001600160a01b0319166001600160a01b0392831617905592909216610140525062000a9f915050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620004e89190620009fb565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b8280546200055e90620009be565b90600052602060002090601f016020900481019282620005825760008555620005cd565b82601f106200059d57805160ff1916838001178555620005cd565b82800160010185558215620005cd579182015b82811115620005cd578251825591602001919060010190620005b0565b50620005db929150620005df565b5090565b5b80821115620005db5760008155600101620005e0565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620006295781810151838201526020016200060f565b8381111562000639576000848401525b50505050565b60006001600160401b03808411156200065c576200065c620005f6565b604051601f8501601f19908116603f01168101908282118183101715620006875762000687620005f6565b81604052809350858152868686011115620006a157600080fd5b620006b18660208301876200060c565b5050509392505050565b6001600160a01b0381168114620006d157600080fd5b50565b60008060408385031215620006e857600080fd5b82516001600160401b03811115620006ff57600080fd5b8301601f810185136200071157600080fd5b62000722858251602084016200063f565b92505060208301516200073581620006bb565b809150509250929050565b600080604083850312156200075457600080fd5b82516200076181620006bb565b60208401519092506200073581620006bb565b6000602082840312156200078757600080fd5b81516001600160401b038111156200079e57600080fd5b8201601f81018413620007b057600080fd5b620007c1848251602084016200063f565b949350505050565b7f54726964656e7420536f6c69646c7920506f6f6c202d20000000000000000000815260008351620008038160178501602088016200060c565b602f60f81b6017918401918201528351620008268160188401602088016200060c565b01601801949350505050565b6000602082840312156200084557600080fd5b815160ff811681146200085757600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620008b55781600019048211156200089957620008996200085e565b80851615620008a757918102915b93841c939080029062000879565b509250929050565b600082620008ce575060016200096d565b81620008dd575060006200096d565b8160018114620008f65760028114620009015762000921565b60019150506200096d565b60ff8411156200091557620009156200085e565b50506001821b6200096d565b5060208310610133831016604e8410600b841016171562000946575081810a6200096d565b62000952838362000874565b80600019048211156200096957620009696200085e565b0290505b92915050565b60006200085760ff841683620008bd565b6000602082840312156200099757600080fd5b81516200085781620006bb565b600060208284031215620009b757600080fd5b5051919050565b600181811c90821680620009d357607f821691505b60208210811415620009f557634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c91508083168062000a1857607f831692505b602080841082141562000a3957634e487b7160e01b86526022600452602486fd5b81801562000a50576001811462000a625762000a91565b60ff1986168952848901965062000a91565b60008a81526020902060005b8681101562000a895781548b82015290850190830162000a6e565b505084890196505b509498975050505050505050565b60805160a05160c05160e051610100516101205161014051610160516101805161301862000c366000396000818161239c01528181612492015281816125b7015261272401526000818161235d015281816124d40152818161259101526126e30152600061057401526000818161043b015281816117760152818161184f01528181611a8801528181611b5501528181611d4f01528181611e2f01528181611f0f01528181611f8301528181612169015261224c01526000818161059b0152818161096a01528181610acc01528181610cb201528181610e3b01528181610e9b01528181610ed8015281816110320152818161181e01528181611ed901526120380152600081816103330152818161094901528181610a6301528181610c9001528181610e1501528181610e7501528181610efe01528181610fc40152818161174301528181611df701528181611fbf015281816120120152818161213001528181612213015281816123de0152818161243f015261253e01526000610be201526000610bad015260006103bd01526130186000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c8063627dd56a1161012a578063a8f1f52e116100bd578063cf58879a1161008c578063d505accf11610071578063d505accf146105bd578063dd62ed3e146105d2578063f140a35a146105fd57600080fd5b8063cf58879a1461056f578063d21220a71461059657600080fd5b8063a8f1f52e14610540578063a9059cbb14610553578063af8c09bf14610275578063c14ad8021461056657600080fd5b80637ba0e2e7116100f95780637ba0e2e7146104de5780637ecebe00146104f157806395d89b4114610511578063a69840a81461051957600080fd5b8063627dd56a1461048d57806367e4ac2c146104a057806370a08231146104b55780637464fc3d146104d557600080fd5b806323b872dd116101bd5780633644e5151161018c578063499a3c5011610171578063499a3c50146102755780634da31827146104365780635a76f25e1461045d57600080fd5b80633644e515146103f1578063443cb4bc146103f957600080fd5b806323b872dd1461035e5780632a07b6c71461037157806330adf81f14610391578063313ce567146103b857600080fd5b8063095ea7b3116101f9578063095ea7b3146102eb5780630c0a0cd21461030e5780630dfe16811461032e57806318160ddd1461035557600080fd5b8063017e7e581461022b578063053da1c81461027557806306fdde03146102965780630902f1ac146102ab575b600080fd5b60085461024b9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6102886102833660046129fb565b610610565b60405190815260200161026c565b61029e610644565b60405161026c9190612a6d565b600754604080516fffffffffffffffffffffffffffffffff808416825270010000000000000000000000000000000090930490921660208301520161026c565b6102fe6102f9366004612b05565b6106d2565b604051901515815260200161026c565b600b5461024b9073ffffffffffffffffffffffffffffffffffffffff1681565b61024b7f000000000000000000000000000000000000000000000000000000000000000081565b61028860025481565b6102fe61036c366004612b31565b61074b565b61038461037f3660046129fb565b610891565b60405161026c9190612b72565b6102887f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6103df7f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff909116815260200161026c565b610288610ba9565b600754610415906fffffffffffffffffffffffffffffffff1681565b6040516fffffffffffffffffffffffffffffffff909116815260200161026c565b61024b7f000000000000000000000000000000000000000000000000000000000000000081565b6007546104159070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1681565b61028861049b3660046129fb565b610c04565b6104a8610fa2565b60405161026c9190612bd7565b6102886104c3366004612c31565b60036020526000908152604090205481565b61028860095481565b6102886104ec3660046129fb565b6110a1565b6102886104ff366004612c31565b60056020526000908152604090205481565b61029e61127a565b6102887f54726964656e743a536f6c69646c79506f6f6c0000000000000000000000000081565b61028861054e3660046129fb565b611287565b6102fe610561366004612b05565b6112f8565b610288600a5481565b61024b7f000000000000000000000000000000000000000000000000000000000000000081565b61024b7f000000000000000000000000000000000000000000000000000000000000000081565b6105d06105cb366004612c4e565b61137d565b005b6102886105e0366004612cc5565b600460209081526000928352604080842090915290825290205481565b61028861060b366004612cfe565b6116a9565b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805461065190612d23565b80601f016020809104026020016040519081016040528092919081815260200182805461067d90612d23565b80156106ca5780601f1061069f576101008083540402835291602001916106ca565b820191906000526020600020905b8154815290600101906020018083116106ad57829003601f168201915b505050505081565b33600081815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061073a9086815260200190565b60405180910390a350600192915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526004602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107df576107ad8382612da0565b73ffffffffffffffffffffffffffffffffffffffff861660009081526004602090815260408083203384529091529020555b73ffffffffffffffffffffffffffffffffffffffff851660009081526003602052604081208054859290610814908490612da0565b909155505073ffffffffffffffffffffffffffffffffffffffff808516600081815260036020526040908190208054870190555190918716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061087c9087815260200190565b60405180910390a360019150505b9392505050565b6060600654600114610904576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f5245454e5452414e43590000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6002600655600061091783850185612c31565b6007549091506fffffffffffffffffffffffffffffffff808216917001000000000000000000000000000000009004167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000600080610994611706565b306000908152600360205260408120549294509092506109b488886118c2565b5090506000816109c48685612db7565b6109ce9190612df4565b90506000826109dd8686612db7565b6109e79190612df4565b90506109f3308561198b565b610a0088838d6000611a21565b610a0d87828d6000611a21565b604080516002808252606082019092529683900396958290039590816020015b6040805180820190915260008082526020820152815260200190600190039081610a2d579050509b5060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001838152508c600081518110610ab457610ab4612e2f565b602002602001018190525060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001828152508c600181518110610b1d57610b1d612e2f565b6020026020010181905250610b328686611bb8565b610b3c8686611c32565b600955604080518381526020810183905273ffffffffffffffffffffffffffffffffffffffff8d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050600160065550979a9950505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614610bdf57610bda611c5b565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b6000600654600114610c72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f5245454e5452414e43590000000000000000000000000000000000000000000060448201526064016108fb565b6002600655600080610c8684860186612e5e565b60075491935091507f0000000000000000000000000000000000000000000000000000000000000000907f0000000000000000000000000000000000000000000000000000000000000000906fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041681610d0657600080fd5b600080610d11611706565b9150915060008815610d9657610d396fffffffffffffffffffffffffffffffff861684612da0565b9050610d4761271082612df4565b610d519082612da0565b9050610d838188876fffffffffffffffffffffffffffffffff16876fffffffffffffffffffffffffffffffff16611cf5565b9950610d8f8a83612da0565b9150610e0b565b610db26fffffffffffffffffffffffffffffffff851683612da0565b9050610dc061271082612df4565b610dca9082612da0565b9050610dfc8187876fffffffffffffffffffffffffffffffff16876fffffffffffffffffffffffffffffffff16611cf5565b9950610e088a84612da0565b92505b610e6489610e39577f0000000000000000000000000000000000000000000000000000000000000000610e5b565b7f00000000000000000000000000000000000000000000000000000000000000005b8b8a6000611a21565b610e6e8383611bb8565b88610e99577f0000000000000000000000000000000000000000000000000000000000000000610ebb565b7f00000000000000000000000000000000000000000000000000000000000000005b73ffffffffffffffffffffffffffffffffffffffff1689610efc577f0000000000000000000000000000000000000000000000000000000000000000610f1e565b7f00000000000000000000000000000000000000000000000000000000000000005b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062848e604051610f85929190918252602082015260400190565b60405180910390a450506001600655509598975050505050505050565b60408051600280825260608083018452926020830190803683370190505090507f000000000000000000000000000000000000000000000000000000000000000081600081518110610ff657610ff6612e2f565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061106457611064612e2f565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505090565b600060065460011461110f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f5245454e5452414e43590000000000000000000000000000000000000000000060448201526064016108fb565b6002600655600061112283850185612c31565b6007549091506fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041660008061115d611706565b9092509050600061116e8584612da0565b9050600061117c8584612da0565b9050600061118a87876118c2565b509050806111bd576103e861119f84846120f3565b6111a99190612da0565b98506111b860006103e86122c5565b6111f2565b6111ef876111cb8386612db7565b6111d59190612df4565b876111e08486612db7565b6111ea9190612df4565b612336565b98505b6111fc888a6122c5565b6112068585611bb8565b6112108585611c32565b600955604080518481526020810184905273ffffffffffffffffffffffffffffffffffffffff8a169133917fdbba30eb0402b389513e87f51f4db2db80bed454384ec6925a24097c3548a02a910160405180910390a3505060016006555094979650505050505050565b6001805461065190612d23565b6000808061129784860186612b05565b60075491935091506fffffffffffffffffffffffffffffffff808216917001000000000000000000000000000000009004166112d561271084612df4565b6112df9084612da0565b92506112ed8385848461234c565b979650505050505050565b33600090815260036020526040812080548391908390611319908490612da0565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600081815260036020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061073a9086815260200190565b428410156113e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5045524d49545f444541444c494e455f4558504952454400000000000000000060448201526064016108fb565b60006113f1610ba9565b73ffffffffffffffffffffffffffffffffffffffff89811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938c166060840152608083018b905260a083019390935260c08083018a90528151808403909101815260e0830190915280519201919091207f190100000000000000000000000000000000000000000000000000000000000061010083015261010282019290925261012281019190915261014201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611550573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158015906115cb57508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f5349474e455200000000000000000000000000000000000060448201526064016108fb565b73ffffffffffffffffffffffffffffffffffffffff90811660009081526004602090815260408083208b8516808552908352928190208a905551898152919350918a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b6007546000906fffffffffffffffffffffffffffffffff808216917001000000000000000000000000000000009004166116e561271086612df4565b6116ef9086612da0565b94506116fd8585848461234c565b95945050505050565b6040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600483015230602483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063f7888aec90604401602060405180830381865afa1580156117bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e19190612e81565b6040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301523060248301529193507f00000000000000000000000000000000000000000000000000000000000000009091169063f7888aec90604401602060405180830381865afa158015611898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bc9190612e81565b90509091565b6002546009546000908015611983576118db8585611c32565b91508082111561198357600a546000816118f58486612da0565b6118ff9087612db7565b6119099190612db7565b905060006119178484612db7565b8561192485612710612da0565b61192e9190612db7565b6119389190612e9a565b905060006119468284612df4565b9050801561197e57600b546119719073ffffffffffffffffffffffffffffffffffffffff16826122c5565b61197b8188612e9a565b96505b505050505b509250929050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040812080548392906119c0908490612da0565b909155505060028054829003905560405181815260009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b8015611afb576040517f97da6d3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152306024830152838116604483015260006064830152608482018590527f000000000000000000000000000000000000000000000000000000000000000016906397da6d309060a40160408051808303816000875af1158015611ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af49190612eb2565b5050611bb2565b6040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301528381166044830152606482018590527f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90608401600060405180830381600087803b158015611b9957600080fd5b505af1158015611bad573d6000803e3d6000fd5b505050505b50505050565b6fffffffffffffffffffffffffffffffff828116700100000000000000000000000000000000838316810282811760078190556040805192861690941782529190910490921660208301527fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a910160405180910390a15050565b600061088a611c49611c4485856120f3565b6125f8565b611c4490670de0b6b3a7640000612db7565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051611c8d9190612ed6565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6040517f5662311800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820186905260006044830181905291611f7f917f00000000000000000000000000000000000000000000000000000000000000001690635662311890606401602060405180830381865afa158015611d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dba9190612e81565b6040517f5662311800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018790526000604483015287917f000000000000000000000000000000000000000000000000000000000000000090911690635662311890606401602060405180830381865afa158015611e78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9c9190612e81565b6040517f5662311800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201889052600060448301527f00000000000000000000000000000000000000000000000000000000000000001690635662311890606401602060405180830381865afa158015611f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7a9190612e81565b61234c565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663da5139ca7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614612036577f0000000000000000000000000000000000000000000000000000000000000000612058565b7f00000000000000000000000000000000000000000000000000000000000000005b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024810184905260006044820152606401602060405180830381865afa1580156120cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fd9190612e81565b6040517f5662311800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052600060448301819052917f000000000000000000000000000000000000000000000000000000000000000090911690635662311890606401602060405180830381865afa1580156121b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d69190612e81565b6040517f5662311800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201859052600060448301529194507f000000000000000000000000000000000000000000000000000000000000000090911690635662311890606401602060405180830381865afa158015612295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b99190612e81565b915061088a83836126de565b80600260008282546122d79190612e9a565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000818152600360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101611a15565b6000818310612345578161088a565b5090919050565b60008061235984846126de565b90507f000000000000000000000000000000000000000000000000000000000000000061238e85670de0b6b3a7640000612db7565b6123989190612df4565b93507f00000000000000000000000000000000000000000000000000000000000000006123cd84670de0b6b3a7640000612db7565b6123d79190612df4565b92506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614612436578486612439565b85855b915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146124d2577f00000000000000000000000000000000000000000000000000000000000000006124c389670de0b6b3a7640000612db7565b6124cd9190612df4565b61250f565b7f000000000000000000000000000000000000000000000000000000000000000061250589670de0b6b3a7640000612db7565b61250f9190612df4565b97506000612527612520848b612e9a565b85846127e7565b6125319083612da0565b9050670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16146125b5577f00000000000000000000000000000000000000000000000000000000000000006125d7565b7f00000000000000000000000000000000000000000000000000000000000000005b6125e19083612db7565b6125eb9190612df4565b9998505050505050505050565b600181700100000000000000000000000000000000811061261e5760409190911b9060801c5b6801000000000000000081106126395760209190911b9060401c5b64010000000081106126505760109190911b9060201c5b6201000081106126655760089190911b9060101c5b61010081106126795760049190911b9060081c5b6010811061268c5760029190911b9060041c5b6008811061269b578160011b91505b5080820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c808204818110156126d8578091505b50919050565b6000807f000000000000000000000000000000000000000000000000000000000000000061271485670de0b6b3a7640000612db7565b61271e9190612df4565b905060007f000000000000000000000000000000000000000000000000000000000000000061275585670de0b6b3a7640000612db7565b61275f9190612df4565b90506000670de0b6b3a76400006127768385612db7565b6127809190612df4565b90506000670de0b6b3a76400006127978480612db7565b6127a19190612df4565b670de0b6b3a76400006127b48680612db7565b6127be9190612df4565b6127c89190612e9a565b9050670de0b6b3a76400006127dd8284612db7565b6112ed9190612df4565b6000805b60ff8110156128ed5782600061280187836128f6565b9050858110156128515760006128178887612993565b6128218389612da0565b61283390670de0b6b3a7640000612db7565b61283d9190612df4565b90506128498187612e9a565b955050612893565b600061285d8887612993565b6128678884612da0565b61287990670de0b6b3a7640000612db7565b6128839190612df4565b905061288f8187612da0565b9550505b818511156128bc5760016128a78387612da0565b116128b75784935050505061088a565b6128d8565b60016128c88684612da0565b116128d85784935050505061088a565b505080806128e590612fa9565b9150506127eb565b50909392505050565b6000670de0b6b3a76400008281858161290f8280612db7565b6129199190612df4565b6129239190612db7565b61292d9190612df4565b6129379190612db7565b6129419190612df4565b670de0b6b3a76400008084816129578280612db7565b6129619190612df4565b61296b9190612db7565b6129759190612df4565b61297f9086612db7565b6129899190612df4565b61088a9190612e9a565b6000670de0b6b3a764000083816129aa8280612db7565b6129b49190612df4565b6129be9190612db7565b6129c89190612df4565b670de0b6b3a7640000806129dc8580612db7565b6129e69190612df4565b6129f1866003612db7565b61297f9190612db7565b60008060208385031215612a0e57600080fd5b823567ffffffffffffffff80821115612a2657600080fd5b818501915085601f830112612a3a57600080fd5b813581811115612a4957600080fd5b866020828501011115612a5b57600080fd5b60209290920196919550909350505050565b600060208083528351808285015260005b81811015612a9a57858101830151858201604001528201612a7e565b81811115612aac576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b73ffffffffffffffffffffffffffffffffffffffff81168114612b0257600080fd5b50565b60008060408385031215612b1857600080fd5b8235612b2381612ae0565b946020939093013593505050565b600080600060608486031215612b4657600080fd5b8335612b5181612ae0565b92506020840135612b6181612ae0565b929592945050506040919091013590565b602080825282518282018190526000919060409081850190868401855b82811015612bca578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101612b8f565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612c2557835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101612bf3565b50909695505050505050565b600060208284031215612c4357600080fd5b813561088a81612ae0565b600080600080600080600060e0888a031215612c6957600080fd5b8735612c7481612ae0565b96506020880135612c8481612ae0565b95506040880135945060608801359350608088013560ff81168114612ca857600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215612cd857600080fd5b8235612ce381612ae0565b91506020830135612cf381612ae0565b809150509250929050565b60008060408385031215612d1157600080fd5b823591506020830135612cf381612ae0565b600181811c90821680612d3757607f821691505b602082108114156126d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015612db257612db2612d71565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612def57612def612d71565b500290565b600082612e2a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008060408385031215612e7157600080fd5b82358015158114612ce357600080fd5b600060208284031215612e9357600080fd5b5051919050565b60008219821115612ead57612ead612d71565b500190565b60008060408385031215612ec557600080fd5b505080516020909101519092909150565b600080835481600182811c915080831680612ef257607f831692505b6020808410821415612f2b577f4e487b710000000000000000000000000000000000000000000000000000000086526022600452602486fd5b818015612f3f5760018114612f6e57612f9b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00861689528489019650612f9b565b60008a81526020902060005b86811015612f935781548b820152908501908301612f7a565b505084890196505b509498975050505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612fdb57612fdb612d71565b506001019056fea264697066735822122047dc40909cd3fcbb7771fa584d4fbcae460fe0947b9ec630b98e31f63c80197764736f6c634300080a0033a264697066735822122023773db0841ce73f225e9d1a204e9ec32d6d3d3ef9d0a31ca56cb60edaa0d43164736f6c634300080a0033",
  "devdoc": {
    "errors": {
      "UnauthorisedDeployer()": [
        {
          "details": "Custom Errors"
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Contract for deploying Trident Solidly Pool with configurations.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4755,
        "contract": "contracts/pool/solidly/SolidlyPoolFactory.sol:SolidlyPoolFactory",
        "label": "pools",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 4759,
        "contract": "contracts/pool/solidly/SolidlyPoolFactory.sol:SolidlyPoolFactory",
        "label": "configAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 24892,
        "contract": "contracts/pool/solidly/SolidlyPoolFactory.sol:SolidlyPoolFactory",
        "label": "cachedDeployData",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}